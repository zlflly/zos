"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cache_exports = {};
__export(cache_exports, {
  getCache: () => getCache
});
module.exports = __toCommonJS(cache_exports);
var import_get_context = require("../get-context");
var import_in_memory_cache = require("./in-memory-cache");
const defaultKeyHashFunction = (key) => {
  let hash = 5381;
  for (let i = 0; i < key.length; i++) {
    hash = hash * 33 ^ key.charCodeAt(i);
  }
  return (hash >>> 0).toString(16);
};
const defaultNamespaceSeparator = "$";
let inMemoryCacheInstance = null;
const getCache = (cacheOptions) => {
  const resolveCache = () => {
    const ctxCache = (0, import_get_context.getContext)().cache;
    if (ctxCache)
      return ctxCache;
    if (!inMemoryCacheInstance) {
      inMemoryCacheInstance = new import_in_memory_cache.InMemoryCache();
      console.warn(
        "Runtime Cache unavailable in this environment. Falling back to in-memory cache."
      );
    }
    return inMemoryCacheInstance;
  };
  const hashFunction = cacheOptions?.keyHashFunction || defaultKeyHashFunction;
  const makeKey = (key) => {
    let prefix = "";
    if (cacheOptions?.namespace) {
      const namespaceSeparator = cacheOptions.namespaceSeparator || defaultNamespaceSeparator;
      prefix = `${cacheOptions.namespace}${namespaceSeparator}`;
    }
    return `${prefix}${hashFunction(key)}`;
  };
  return {
    get: (key, options) => {
      return resolveCache().get(makeKey(key), options);
    },
    set: (key, value, options) => {
      return resolveCache().set(makeKey(key), value, options);
    },
    delete: (key) => {
      return resolveCache().delete(makeKey(key));
    },
    expireTag: (tag) => {
      return resolveCache().expireTag(tag);
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCache
});
