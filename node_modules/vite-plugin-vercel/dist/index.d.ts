import { ResolvedConfig, PluginOption } from 'vite';
import { Rewrite, Redirect, Header } from '@vercel/routing-utils';
import { StdinOptions, BuildOptions } from 'esbuild';
import { z } from 'zod';

/**
 * Schema definition for `.vercel/output/config.json`
 * @see {@link https://vercel.com/docs/build-output-api/v3#build-output-configuration}
 */

declare const vercelOutputConfigSchema: z.ZodObject<{
    version: z.ZodLiteral<3>;
    routes: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        src: z.ZodString;
        dest: z.ZodOptional<z.ZodString>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        methods: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        status: z.ZodOptional<z.ZodNumber>;
        continue: z.ZodOptional<z.ZodBoolean>;
        check: z.ZodOptional<z.ZodBoolean>;
        missing: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"host">;
            value: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            value: string;
            type: "host";
        }, {
            value: string;
            type: "host";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"header">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "header";
            key: string;
            value?: string | undefined;
        }, {
            type: "header";
            key: string;
            value?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cookie">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "cookie";
            key: string;
            value?: string | undefined;
        }, {
            type: "cookie";
            key: string;
            value?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"query">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "query";
            key: string;
            value?: string | undefined;
        }, {
            type: "query";
            key: string;
            value?: string | undefined;
        }>]>, "many">>;
        has: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"host">;
            value: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            value: string;
            type: "host";
        }, {
            value: string;
            type: "host";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"header">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "header";
            key: string;
            value?: string | undefined;
        }, {
            type: "header";
            key: string;
            value?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cookie">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "cookie";
            key: string;
            value?: string | undefined;
        }, {
            type: "cookie";
            key: string;
            value?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"query">;
            key: z.ZodString;
            value: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "query";
            key: string;
            value?: string | undefined;
        }, {
            type: "query";
            key: string;
            value?: string | undefined;
        }>]>, "many">>;
        locale: z.ZodOptional<z.ZodObject<{
            redirect: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            cookie: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        }, {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        }>>;
        middlewarePath: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        src: string;
        status?: number | undefined;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: string[] | undefined;
        continue?: boolean | undefined;
        check?: boolean | undefined;
        missing?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        has?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        locale?: {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        } | undefined;
        middlewarePath?: string | undefined;
    }, {
        src: string;
        status?: number | undefined;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: string[] | undefined;
        continue?: boolean | undefined;
        check?: boolean | undefined;
        missing?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        has?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        locale?: {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        } | undefined;
        middlewarePath?: string | undefined;
    }>, z.ZodObject<{
        handle: z.ZodUnion<[z.ZodLiteral<"rewrite">, z.ZodLiteral<"filesystem">, z.ZodLiteral<"resource">, z.ZodLiteral<"miss">, z.ZodLiteral<"hit">, z.ZodLiteral<"error">]>;
        src: z.ZodOptional<z.ZodString>;
        dest: z.ZodOptional<z.ZodString>;
        status: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        handle: "rewrite" | "filesystem" | "resource" | "miss" | "hit" | "error";
        status?: number | undefined;
        src?: string | undefined;
        dest?: string | undefined;
    }, {
        handle: "rewrite" | "filesystem" | "resource" | "miss" | "hit" | "error";
        status?: number | undefined;
        src?: string | undefined;
        dest?: string | undefined;
    }>]>, "many">>;
    images: z.ZodOptional<z.ZodObject<{
        sizes: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        domains: z.ZodOptional<z.ZodArray<z.ZodString, "atleastone">>;
        minimumCacheTTL: z.ZodOptional<z.ZodNumber>;
        formats: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"image/avif">, z.ZodLiteral<"image/webp">]>, "atleastone">>;
        dangerouslyAllowSVG: z.ZodOptional<z.ZodBoolean>;
        contentSecurityPolicy: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        sizes: [number, number];
        domains?: [string, ...string[]] | undefined;
        minimumCacheTTL?: number | undefined;
        formats?: ["image/avif" | "image/webp", ...("image/avif" | "image/webp")[]] | undefined;
        dangerouslyAllowSVG?: boolean | undefined;
        contentSecurityPolicy?: string | undefined;
    }, {
        sizes: [number, number];
        domains?: [string, ...string[]] | undefined;
        minimumCacheTTL?: number | undefined;
        formats?: ["image/avif" | "image/webp", ...("image/avif" | "image/webp")[]] | undefined;
        dangerouslyAllowSVG?: boolean | undefined;
        contentSecurityPolicy?: string | undefined;
    }>>;
    wildcard: z.ZodOptional<z.ZodArray<z.ZodObject<{
        domain: z.ZodString;
        value: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        value: string;
        domain: string;
    }, {
        value: string;
        domain: string;
    }>, "many">>;
    overrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        path: z.ZodOptional<z.ZodString>;
        contentType: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        path?: string | undefined;
        contentType?: string | undefined;
    }, {
        path?: string | undefined;
        contentType?: string | undefined;
    }>>>;
    cache: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strict", z.ZodTypeAny, {
    version: 3;
    routes?: ({
        src: string;
        status?: number | undefined;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: string[] | undefined;
        continue?: boolean | undefined;
        check?: boolean | undefined;
        missing?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        has?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        locale?: {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        } | undefined;
        middlewarePath?: string | undefined;
    } | {
        handle: "rewrite" | "filesystem" | "resource" | "miss" | "hit" | "error";
        status?: number | undefined;
        src?: string | undefined;
        dest?: string | undefined;
    })[] | undefined;
    images?: {
        sizes: [number, number];
        domains?: [string, ...string[]] | undefined;
        minimumCacheTTL?: number | undefined;
        formats?: ["image/avif" | "image/webp", ...("image/avif" | "image/webp")[]] | undefined;
        dangerouslyAllowSVG?: boolean | undefined;
        contentSecurityPolicy?: string | undefined;
    } | undefined;
    wildcard?: {
        value: string;
        domain: string;
    }[] | undefined;
    overrides?: Record<string, {
        path?: string | undefined;
        contentType?: string | undefined;
    }> | undefined;
    cache?: string[] | undefined;
}, {
    version: 3;
    routes?: ({
        src: string;
        status?: number | undefined;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: string[] | undefined;
        continue?: boolean | undefined;
        check?: boolean | undefined;
        missing?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        has?: ({
            value: string;
            type: "host";
        } | {
            type: "header";
            key: string;
            value?: string | undefined;
        } | {
            type: "cookie";
            key: string;
            value?: string | undefined;
        } | {
            type: "query";
            key: string;
            value?: string | undefined;
        })[] | undefined;
        locale?: {
            cookie?: string | undefined;
            redirect?: Record<string, string> | undefined;
        } | undefined;
        middlewarePath?: string | undefined;
    } | {
        handle: "rewrite" | "filesystem" | "resource" | "miss" | "hit" | "error";
        status?: number | undefined;
        src?: string | undefined;
        dest?: string | undefined;
    })[] | undefined;
    images?: {
        sizes: [number, number];
        domains?: [string, ...string[]] | undefined;
        minimumCacheTTL?: number | undefined;
        formats?: ["image/avif" | "image/webp", ...("image/avif" | "image/webp")[]] | undefined;
        dangerouslyAllowSVG?: boolean | undefined;
        contentSecurityPolicy?: string | undefined;
    } | undefined;
    wildcard?: {
        value: string;
        domain: string;
    }[] | undefined;
    overrides?: Record<string, {
        path?: string | undefined;
        contentType?: string | undefined;
    }> | undefined;
    cache?: string[] | undefined;
}>;
type VercelOutputConfig = z.infer<typeof vercelOutputConfigSchema>;

/**
 * Schema definition for `.vercel/output/config.json`
 * @see {@link https://vercel.com/docs/build-output-api/v3#build-output-configuration}
 */

declare const vercelOutputPrerenderConfigSchema: z.ZodObject<{
    expiration: z.ZodUnion<[z.ZodNumber, z.ZodLiteral<false>]>;
    group: z.ZodOptional<z.ZodNumber>;
    bypassToken: z.ZodOptional<z.ZodString>;
    fallback: z.ZodOptional<z.ZodString>;
    allowQuery: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strict", z.ZodTypeAny, {
    expiration: number | false;
    group?: number | undefined;
    bypassToken?: string | undefined;
    fallback?: string | undefined;
    allowQuery?: string[] | undefined;
}, {
    expiration: number | false;
    group?: number | undefined;
    bypassToken?: string | undefined;
    fallback?: string | undefined;
    allowQuery?: string[] | undefined;
}>;
type VercelOutputPrerenderConfig = z.infer<typeof vercelOutputPrerenderConfigSchema>;

/**
 * Schema definition for `.vercel/output/functions/<name>.func/.vc-config.json`
 * @see {@link https://vercel.com/docs/build-output-api/v3/primitives#serverless-function-configuration}
 */

declare const vercelOutputVcConfigSchema: z.ZodUnion<[z.ZodObject<{
    runtime: z.ZodLiteral<"edge">;
    entrypoint: z.ZodString;
    envVarsInUse: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strict", z.ZodTypeAny, {
    runtime: "edge";
    entrypoint: string;
    envVarsInUse?: string[] | undefined;
}, {
    runtime: "edge";
    entrypoint: string;
    envVarsInUse?: string[] | undefined;
}>, z.ZodObject<{
    runtime: z.ZodString;
    handler: z.ZodString;
    memory: z.ZodOptional<z.ZodNumber>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    regions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    supportsWrapper: z.ZodOptional<z.ZodBoolean>;
    supportsResponseStreaming: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    handler: string;
    runtime: string;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    environment?: Record<string, string> | undefined;
    regions?: string[] | undefined;
    supportsWrapper?: boolean | undefined;
    supportsResponseStreaming?: boolean | undefined;
}, {
    handler: string;
    runtime: string;
    memory?: number | undefined;
    maxDuration?: number | undefined;
    environment?: Record<string, string> | undefined;
    regions?: string[] | undefined;
    supportsWrapper?: boolean | undefined;
    supportsResponseStreaming?: boolean | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    runtime: z.ZodString;
    handler: z.ZodString;
    memory: z.ZodOptional<z.ZodNumber>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    regions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    supportsWrapper: z.ZodOptional<z.ZodBoolean>;
    supportsResponseStreaming: z.ZodOptional<z.ZodBoolean>;
}, {
    launcherType: z.ZodLiteral<"Nodejs">;
    shouldAddHelpers: z.ZodOptional<z.ZodBoolean>;
    shouldAddSourcemapSupport: z.ZodOptional<z.ZodBoolean>;
    awsLambdaHandler: z.ZodOptional<z.ZodString>;
}>, "strict", z.ZodTypeAny, {
    handler: string;
    runtime: string;
    launcherType: "Nodejs";
    memory?: number | undefined;
    maxDuration?: number | undefined;
    environment?: Record<string, string> | undefined;
    regions?: string[] | undefined;
    supportsWrapper?: boolean | undefined;
    supportsResponseStreaming?: boolean | undefined;
    shouldAddHelpers?: boolean | undefined;
    shouldAddSourcemapSupport?: boolean | undefined;
    awsLambdaHandler?: string | undefined;
}, {
    handler: string;
    runtime: string;
    launcherType: "Nodejs";
    memory?: number | undefined;
    maxDuration?: number | undefined;
    environment?: Record<string, string> | undefined;
    regions?: string[] | undefined;
    supportsWrapper?: boolean | undefined;
    supportsResponseStreaming?: boolean | undefined;
    shouldAddHelpers?: boolean | undefined;
    shouldAddSourcemapSupport?: boolean | undefined;
    awsLambdaHandler?: string | undefined;
}>]>;
type VercelOutputVcConfig = z.infer<typeof vercelOutputVcConfigSchema>;

type ViteVercelRewrite = Rewrite & {
    enforce?: "pre" | "post";
};
type ViteVercelRedirect = Redirect & {
    enforce?: "pre" | "post";
};
type Awaitable<T> = T | Promise<T>;
interface ViteVercelConfig {
    /**
     * How long Functions should be allowed to run for every request, in seconds.
     * If left empty, default value for your plan will be used.
     */
    defaultMaxDuration?: number;
    /**
     * Default expiration time (in seconds) for prerender functions.
     * Defaults to 86400 seconds (24h).
     * @see {@link https://vercel.com/docs/concepts/next.js/incremental-static-regeneration}
     * @see {@link https://vercel.com/docs/build-output-api/v3#vercel-primitives/prerender-functions/configuration}
     */
    expiration?: number;
    /**
     * Also known as Server Side Generation, or SSG.
     * If present, this function is responsible to create static files in `.vercel/output/static`.
     * Defaults to `false`, which disables prerendering.
     */
    prerender?: ViteVercelPrerenderFn | false;
    /**
     * @see {@link https://vercel.com/docs/projects/project-configuration#rewrites}
     */
    rewrites?: ViteVercelRewrite[];
    /**
     * @see {@link https://vercel.com/docs/projects/project-configuration#headers}
     * @beta
     */
    headers?: Header[] | (() => Awaitable<Header[]>);
    /**
     * @see {@link https://vercel.com/docs/projects/project-configuration#redirects}
     */
    redirects?: ViteVercelRedirect[];
    /**
     * @see {@link https://vercel.com/docs/projects/project-configuration#cleanurls}
     */
    cleanUrls?: boolean;
    /**
     * @see {@link https://vercel.com/docs/projects/project-configuration#trailingslash}
     */
    trailingSlash?: boolean;
    /**
     * When true, the Serverless Function will stream the response to the client.
     * @see {@link https://vercel.com/docs/build-output-api/v3/primitives#serverless-function-configuration}
     */
    defaultSupportsResponseStreaming?: boolean;
    /**
     * By default, all `api/*` endpoints are compiled under `.vercel/output/functions/api/*.func`.
     * If others serverless functions need to be compiled under `.vercel/output/functions`, they should be added here.
     * For instance, a framework can leverage this to have a generic ssr endpoint
     * without requiring the user to write any code.
     *
     * @example
     * ```
     * {
     *   additionalEndpoints: [
     *     {
     *       // can also be an Object representing an esbuild StdinOptions
     *       source: '/path/to/file.ts',
     *       // URL path of the handler, will be generated to `.vercel/output/functions/api/file.func/index.js`
     *       destination: '/api/file',
     *     }
     *   ]
     * }
     * ```
     */
    additionalEndpoints?: (ViteVercelApiEntry | (() => Awaitable<ViteVercelApiEntry>) | (() => Awaitable<ViteVercelApiEntry[]>))[];
    /**
     * Advanced configuration to override .vercel/output/config.json
     * @see {@link https://vercel.com/docs/build-output-api/v3/configuration#configuration}
     * @protected
     */
    config?: Partial<Omit<VercelOutputConfig, "version">>;
    /**
     * ISR and SSG pages are mutually exclusive. If a page is found in both, ISR prevails.
     * Keys are path relative to .vercel/output/functions directory, either without extension,
     * or with `.prerender-config.json` extension.
     * If you have multiple isr configurations pointing to the same underlying function, you can leverage the `symlink`
     * property. See example below.
     *
     * @example
     * ```
     * // Here `ssr_` means that a function is available under `.vercel/output/functions/ssr_.func`
     * isr: {
     *   '/pages/a': { expiration: 15, symlink: 'ssr_', route: '^/a/.*$' },
     *   '/pages/b/c': { expiration: 15, symlink: 'ssr_', route: '^/b/c/.*$' },
     *   '/pages/d': { expiration: 15, symlink: 'ssr_', route: '^/d$' },
     *   '/pages/e': { expiration: 25 }
     * }
     * ```
     *
     * @protected
     */
    isr?: Record<string, VercelOutputIsr> | (() => Awaitable<Record<string, VercelOutputIsr>>);
    /**
     * Defaults to `.vercel/output`. Mostly useful for testing purpose
     * @protected
     */
    outDir?: string;
    /**
     * By default, Vite generates static files under `dist` folder.
     * But usually, when used through a Framework, such as Vike,
     * this folder can contain anything, requiring custom integration.
     * Set this to false if you create a plugin for a Framework.
     */
    distContainsOnlyStatic?: boolean;
}
interface VercelOutputIsr extends VercelOutputPrerenderConfig {
    symlink?: string;
    route?: string;
}
/**
 * Keys are path relative to .vercel/output/static directory
 */
type ViteVercelPrerenderRoute = VercelOutputConfig["overrides"];
type ViteVercelPrerenderFn = (resolvedConfig: ResolvedConfig) => Awaitable<ViteVercelPrerenderRoute>;
interface ViteVercelApiEntry {
    /**
     * Path to entry file, or stdin config
     */
    source: string | StdinOptions;
    /**
     * Relative to `.vercel/output/functions`, without extension
     */
    destination: string;
    /**
     * Override esbuild options
     */
    buildOptions?: BuildOptions;
    /**
     * @deprecated use `route` instead
     */
    addRoute?: boolean;
    /**
     * If `true`, guesses route for the function, and adds it to config.json (mimics defaults Vercel behavior).
     * If a string is provided, it will be equivalent to a `rewrites` rule.
     * Set to `false` to disable
     */
    route?: string | boolean;
    /**
     * Set to `true` to mark this function as an Edge Function
     */
    edge?: boolean;
    /**
     * Additional headers
     */
    headers?: Record<string, string> | null;
    /**
     * ISR config
     */
    isr?: VercelOutputIsr;
    /**
     * When true, the Serverless Function will stream the response to the client
     */
    streaming?: boolean;
}

declare function allPlugins(options?: any): PluginOption[];

export { type Awaitable, type VercelOutputConfig, type VercelOutputIsr, type VercelOutputPrerenderConfig, type VercelOutputVcConfig, type ViteVercelApiEntry, type ViteVercelConfig, type ViteVercelPrerenderFn, type ViteVercelPrerenderRoute, type ViteVercelRedirect, type ViteVercelRewrite, allPlugins as default };
